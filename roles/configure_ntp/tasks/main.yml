---

# This file is the tasks entry point. However, it should be mostly empty. Why ? Because you want to use Ansible tags. Tags are a great way to limit task execution for an Ansible run, where only tagged tasks are run.

# For instance, in a playbook that deploys your application, you could choose to run only tasks regarding nginx.

# The problem is that tagging every task in main.yml would be cumbersome, error prone, and clutter the code unnecessarily.

# The best way to tag all your tasks is to include your real task file from tasks/main.yml and tag the whole file:

# - include: foobar.yml tags=foobar
# Here, I name the real task file foobar.yml with the same name as the role (quite handy with find or locate; no need to guess which main.yml you are looking for) and apply the tag foobar to all tasks in the role.

# You can repeat this if you have a big list of tasks and want to split them in several files. You could, for instance, separate configuration and installation matters, and add another specific tag for each of them:

# - include: foobar-install.yml tags=foobar,foobar:install
# - include: foobar-config.yml tags=foobar,foobar:config
# Here I added two tags to the installation part (foobar and foobar:install), and two for the configuration part (foobar and foobar:config).

# Note that the : between, for instance, foobar and config has no meaning. Ansible treats tags as dumb strings. It is just a personnal convention (Redis like) for refining tags.

# With this setup, you could run only the configuration part of your role by issuing:

# ansible-playbook playbook.yml -t foobar:config

# The -t and -l combination is a very powerful weapon to target a specific host with a precise change (think of this as pointing to a matrix cell targetting host (i.e. row) and tag (i.e. column)).
